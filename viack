#!/usr/bin/env perl
use strict;
use warnings;
use open qw/ :std :encoding(UTF-8) /;

use File::Basename qw(basename);
use File::Temp qw(tempfile);
use List::MoreUtils qw(uniq);

my ($grabnext, @vimopts, @hits);

# Extract the ack pattern to use when spawning vim
for (@ARGV) {
    if ($grabnext or not /^-/) {
        # Try to make vim's magic mode more like Perl's standard regexes
        # Magic chars gleaned from :help magic, and the most common problem
        # characters are < and >
        my $vimpat = $_;
           $vimpat =~ s{([<>=@!%/&])}{\\$1}g;
           $vimpat =~ s{(^|(?<=[^\\]))\\b}{\\W\\@=}g; # translate Perl's \b to \W\@= for vim
           # see http://code.google.com/p/re2/wiki/Syntax
        push @vimopts, '+1', '+/\v'.$vimpat;
        last;
    }
    elsif (/^--$/) {
        $grabnext = 1;
    }
}

# Capture output without dealing with shell escaping
my $pid = open my $kid, "-|";
die "Can't fork: $!" unless defined $pid;

if ($pid) {
    @hits = <$kid>;
    chomp for @hits;
    close $kid;
} else {
    my ($via_git, $invoked_as) = basename($0) =~ /^(git-)?vi(.+)/;
    my $grep = ($via_git ? undef : $ENV{VIACK_GREP}) || $invoked_as || 'ack';

    # ack and ag default to line numbers and headings
    my @opts = qw( --noheading --nobreak --nocolor );

    # git vigrep
    if ($via_git) {
        @opts = ("grep", "-H", "--perl-regexp");
        $grep = "git";
    }
    exec $grep => @opts, @ARGV
        or die "Can't exec $grep: $!";
}

if (@hits) {
    my ($tmpfh, $tmpfn) = tempfile( "viack-XXXXX", TMPDIR => 1 );
    print { $tmpfh } "$_\n" for @hits;
    close $tmpfh;

    my @files = uniq map { /^(.+?):\d/; $1 } @hits;

    exec "vim", @vimopts, "+cfile $tmpfn", "--", @files
        or die "Can't exec vim. $!";
} else {
    die "No matches to open.\n";
}
